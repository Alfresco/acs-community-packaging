dist: xenial
sudo: required
language: java
jdk:
  - openjdk11

services:
  - docker

cache:
  directories:
    - $HOME/.m2
# the cache can grow constantly
before_cache:
  - rm -rf $HOME/.m2/repository/org/alfresco/acs-community-packaging
env:
  global:
    - VERSION_EDITION=Community

branches:
  only:
    - master
    - develop

stages:
  - name: test
    if: commit_message !~ /\[skipTests\]/
  - name: engineering release
  - name: company release


before_install: "cp .travis.settings.xml $HOME/.m2/settings.xml"

matrix:
  include:
    - stage: test
      name: "WhiteSource scan"
      # only on master and if it is not a PR
      if: fork = false AND branch = develop AND type != pull_request
      install:
        - travis_retry travis_wait 30 mvn -q install "-Dversion.edition=${VERSION_EDITION}" -f war/pom.xml
      script:
        # Download the latest version of WhiteSource Unified Agent
        - curl -LJO https://github.com/whitesource/unified-agent-distribution/raw/master/standAlone/wss-unified-agent.jar
        # Run WhiteSource Unified Agent
        - java -jar wss-unified-agent.jar -apiKey ${WHITESOURCE_API_KEY} -c .wss-unified-agent.config -d ./war
    - name: "REST API TAS tests part1"
      jdk: openjdk11
      install:
        - travis_retry travis_wait 40 mvn install -q "-Dversion.edition=${VERSION_EDITION}" -Dmaven.javadoc.skip=true -PcommunityDocker
        - ./tests/scripts/start-compose.sh ./tests/environment/docker-compose-minimal+transforms.yml
        - ./tests/scripts/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 60 mvn install -f tests/tas-restapi/pom.xml -Pall-tas-tests,run-restapi-part1 -Denvironment=default -DrunBugs=false
    - name: "REST API TAS tests part2"
      jdk: openjdk11
      install:
        - travis_retry travis_wait 40 mvn install -q "-Dversion.edition=${VERSION_EDITION}" -Dmaven.javadoc.skip=true -PcommunityDocker
        - ./tests/scripts/start-compose.sh ./tests/environment/docker-compose-minimal+transforms.yml
        - ./tests/scripts/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 60 mvn install -f tests/tas-restapi/pom.xml -Pall-tas-tests,run-restapi-part2 -Denvironment=default -DrunBugs=false
    - name: "REST API TAS tests part3"
      jdk: openjdk11
      install:
        - travis_retry travis_wait 40 mvn install -q "-Dversion.edition=${VERSION_EDITION}" -Dmaven.javadoc.skip=true -PcommunityDocker
        - ./tests/scripts/start-compose.sh ./tests/environment/docker-compose-minimal+transforms.yml
        - ./tests/scripts/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 60 mvn install -f tests/tas-restapi/pom.xml -Pall-tas-tests,run-restapi-part3 -Denvironment=default -DrunBugs=false
    - name: "CMIS TAS tests"
      jdk: openjdk11
      install:
        - travis_retry travis_wait 40 mvn install -q "-Dversion.edition=${VERSION_EDITION}" -Dmaven.javadoc.skip=true -PcommunityDocker
        - ./tests/scripts/start-compose.sh ./tests/environment/docker-compose-minimal+transforms.yml
        - ./tests/scripts/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 40 mvn install -q -f tests/tas-cmis/pom.xml -Pall-tas-tests -Denvironment=default -DrunBugs=false
    - name: "Email TAS tests"
      jdk: openjdk11
      install:
        - travis_retry travis_wait 40 mvn install -q "-Dversion.edition=${VERSION_EDITION}" -Dmaven.javadoc.skip=true -PcommunityDocker
        - ./tests/scripts/start-compose.sh ./tests/environment/docker-compose-minimal.yml
        - ./tests/scripts/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 30 mvn install -q -f tests/tas-email/pom.xml -Pall-tas-tests -Denvironment=default -DrunBugs=false
    - name: "WebDAV TAS tests"
      jdk: openjdk11
      install:
        - travis_retry travis_wait 40 mvn install -q "-Dversion.edition=${VERSION_EDITION}" -Dmaven.javadoc.skip=true -PcommunityDocker
        - ./tests/scripts/start-compose.sh ./tests/environment/docker-compose-minimal.yml
        - ./tests/scripts/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 30 mvn install -q -f tests/tas-webdav/pom.xml -Pall-tas-tests -Denvironment=default -DrunBugs=false
    - name: "Integration TAS tests"
      jdk: openjdk11
      install:
        - travis_retry travis_wait 40 mvn install -q "-Dversion.edition=${VERSION_EDITION}" -Dmaven.javadoc.skip=true -PcommunityDocker
        - ./tests/scripts/start-compose.sh ./tests/environment/docker-compose-minimal.yml
        - ./tests/scripts/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 30 mvn install -q -f tests/tas-integration/pom.xml -Pall-tas-tests -Denvironment=default -DrunBugs=false
    - stage: Engineering Release
      name: "Maven release"
      if: commit_message ~= /\[trigger-release\]/ AND fork = false AND branch =~ ^(master|develop)$ AND type != pull_request
      # Fail the job if there is a docker image tag that matches the RELEASE_VERSION (or project version in the POM if not set)
      before_install: 
        - "cp .travis.settings.xml $HOME/.m2/settings.xml"
        - bash ./scripts/travis/verifyReleaseTag.sh 
      install: travis_wait mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V -q
      script: bash ./scripts/travis/mavenRelease.sh ${RELEASE_VERSION} ${DEVELOPMENT_VERSION}
      # if the release stage fails rollback
      after_failure: 
        - mvn release:rollback -DscmCommentPrefix="[maven-release-plugin][skip ci] "
      # Copy alfresco.war and the distribution zip to deploy_dir
      before_deploy: bash ./scripts/travis/prepareEngineeringRelease.sh
      deploy:
      - provider: s3
        access_key_id: ${AWS_STAGING_ACCESS_KEY}
        secret_access_key: ${AWS_STAGING_SECRET_KEY}
        bucket: "alfresco-artefacts-staging"
        region: "eu-west-1"
        skip_cleanup: true
        acl: private
        local_dir: deploy_dir
        upload_dir: "alfresco-content-services-community/release/${TRAVIS_BRANCH}/${TRAVIS_BUILD_NUMBER}"
        on: 
          all_branches: true
          condition: $TRAVIS_BRANCH =~ ^(master|develop)$
    - stage: "Company Release"
      name: "Copy to S3 Release"
      if: commit_message ~= /\[trigger-company-release\]/ AND fork = false AND branch = master type != pull_request 
      # Nothing to build/install as we are just copying from S3 buckets
      install: skip 
      script: skip
      before_deploy: pip install awscli
      delpoy:
        - provider: script
          script:  ./scripts/travis/companyReleaseDeployment.sh ${TRAVIS_BUILD_NUMBER} ${TRAVIS_BRANCH}
          on:
            branch: master
            
      
